// ...existing code...
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model KycSubmission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  academyId    String
  ownerImageUrl        String
  bannerImageUrl       String
  ownerWithBannerImageUrl String
  location     String
  latitude     Float
  longitude    Float
  address      String?
  dateTime     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  reviews      KycReview[]
}

model KycReview {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  kycId         String   @db.ObjectId
  reviewerId    String   // Admin user ID who reviewed
  status        String   // "approved" | "rejected"
  comments      String?  // Reason for rejection or approval notes
  rejectionReasons String[] @default([]) // Array of specific rejection reasons (for detailed rejections)
  customMessage String?  // Custom message from admin (for detailed rejections)
  reviewedAt    DateTime @default(now())
  
  // Relations
  kyc           KycSubmission @relation(fields: [kycId], references: [id])
  
  @@index([kycId])
}
// Add these enums at the top level of your schema file
enum UserRole {
  super_admin
  student
  admin
  instructor  // Added

  // Add other roles as needed
}

enum KycStatus {
  pending
  approved
  rejected
  expired
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
  // Add other statuses as needed
}

enum IssueType {
  technical
  billing
  general_inquiry
  bug_report
  
  // Add other types as needed
}

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  userId               String?   @unique
  academyId            String?
  name                 String
  email                String    @unique
  phone                String?
  password             String?
  role                 UserRole?
  verified             Boolean   @default(false)
  verificationToken    String?   
  otp                  String?
  otpExpiry            DateTime?
  resetToken           String?   
  resetTokenExpiry     DateTime?
  failedAttempts       Int       @default(0)
  lockedUntil          DateTime?
  googleId             String?  
  image                String?   // Add field for user image/avatar (see point 3)
  registrationComplete Boolean   @default(false)

  // KYC fields
  kycStatus            KycStatus @default(pending)
  kycSubmissionDate    DateTime?

  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  // Optional: Add relation if SupportTickets should be linked to users
  // supportTickets SupportTicket[]
}

model SupportTicket {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  issueType     String
  description   String
  ticketNumber  String?  @unique
  status        TicketStatus @default(open)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Optional: Add relation if SupportTickets should be linked to users
  // userId        String?   @db.ObjectId // Make optional if anonymous tickets are allowed
  // user          User?     @relation(fields: [userId], references: [id])

  // Optional: Add index if relating to User
  // @@index([userId])
}

/// @collection("registrations")
model Registration {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  academyId         String    @unique
  userId            String    @unique
  
  // Registration Data (nested objects only - clean approach)
  businessInfo      Json
  adminInfo         Json
  preferences       Json?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  
  @@map("registrations")
}

/// Example domain models scoped by academyId (and optionally userId)
model Course {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  academyId  String
  userId     String
  title      String
  code       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([academyId])
  @@index([userId])
}

model Student {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  academyId  String
  userId     String
  name       String
  email      String   @unique
  enrolledAt DateTime @default(now())

  @@index([academyId])
  @@index([userId])
}

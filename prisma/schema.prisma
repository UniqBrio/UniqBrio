// ...existing code...
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

model KycSubmission {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  academyId    String
  ownerImageUrl        String
  bannerImageUrl       String
  ownerWithBannerImageUrl String
  location     String
  latitude     Float
  longitude    Float
  address      String?
  dateTime     String
  createdAt    DateTime @default(now())
  
  @@map("KycSubmission") // Maps to existing collection
}

model KycReminderLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  dayNumber Int      // 1, 7, 10, 13, or 14
  sentAt    DateTime @default(now())
  
  @@unique([userId, dayNumber])
  @@map("kyc_reminder_logs")
}
// Add these enums at the top level of your schema file
enum UserRole {
  super_admin
  student
  admin
  instructor  // Added
  

  // Add other roles as needed
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
  // Add other statuses as needed
}

enum IssueType {
  technical
  billing
  general_inquiry
  bug_report
  
  // Add other types as needed
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  userId            String?   @unique
  academyId         String?
  name              String
  email             String    @unique
  phone             String?
  password          String?
  role              UserRole?
  verified          Boolean   @default(false)
  verificationToken String?   
  otp               String?
  otpExpiry         DateTime?
  resetToken        String?   
  resetTokenExpiry  DateTime?
  failedAttempts    Int       @default(0)
  lockedUntil       DateTime?
  googleId          String?  
  image             String?   // Add field for user image/avatar (see point 3)
  registrationComplete Boolean @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  // Optional: Add relation if SupportTickets should be linked to users
  // supportTickets SupportTicket[]
  
  @@map("User") // Maps to existing "User" collection
}

model Academy {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  academyId         String    @unique
  name              String
  legalEntityName   String?
  email             String?
  phone             String?
  industryType      String?
  servicesOffered   String[]
  studentSize       String?
  staffCount        String?
  country           String?
  state             String?
  city              String?
  address           String?
  website           String?
  preferredLanguage String?
  logoUrl           String?
  createdAt         DateTime  @default(now())
// ...existing code...

  @@map("Academy") // Maps to existing "Academy" collection
}

model SupportTicket {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String
  issueType     String
  description   String
  ticketNumber  String?  @unique
  status        TicketStatus @default(open)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Optional: Add relation if SupportTickets should be linked to users
  // userId        String?   @db.ObjectId // Make optional if anonymous tickets are allowed
  // user          User?     @relation(fields: [userId], references: [id])

  // Optional: Add index if relating to User
  // @@index([userId])
}

/// Maps to existing "registrations" collection
model Registration {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  academyId    String
  userId       String
  businessInfo Json
  adminInfo    Json
  preferences  Json?
  createdAt    DateTime @default(now())
  
  @@map("registrations") // Maps to existing "registrations" collection
}

/// Example domain models scoped by academyId (and optionally userId)
model Course {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  academyId  String
  userId     String
  title      String
  code       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([academyId])
  @@index([userId])
}

model Student {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  academyId  String
  userId     String
  name       String
  email      String   @unique
  enrolledAt DateTime @default(now())

  @@index([academyId])
  @@index([userId])
}
